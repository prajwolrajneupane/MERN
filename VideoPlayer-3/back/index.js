import express from "express"
import dotenv from 'dotenv';
import bcrypt from "bcrypt";
import cors from "cors"
import mongoose from "mongoose"
import jwt from "jsonwebtoken"
import User from "./models/user.model.js"
import { Video } from "./models/video.model.js"
import { Comment } from "./models/comment.model.js"

dotenv.config();
const app= express();

app.use(cors());
app.use(express.json());

app.get("/",(req,res)=>{
    res.send("like and comment");

})

app.post("/register",async (req,res)=>{
    const {username,email,password}=req.body;
        // checking if user pailai exists garxa or not
    const existingUser = await User.findOne({ email });

          if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }
    // hashing the password:
    const salt=await bcrypt.genSalt(10);
    const hashedPassword=await bcrypt.hash(password,salt);

     await User.create({
        username,email,password:hashedPassword
    });
    res.status(200).json({
        "message":"success"
    })
})

app.post("/login",async(req,res)=>{
    const {email,password}=req.body;
        const existingUser = await User.findOne({ email });
        // when the email matches, the whole usermodel is returned
        // email xa vanesi, existingUser has the whole User model ko sabai 

          if (!existingUser) {
      return res.status(400).json({ message: 'xaina esto' });

    }    
    const isMatch = await bcrypt.compare(password, existingUser.password);
    // why are we comparing the password with exisiting user.password and not user.password
    // cause we cannot do that with user.passowrd and exisitingUser has got all the fields of the user
    // think of it as: User is the class of the model and exisitingUser has become the object after email was found
    // we cannot do.blahblah on directly class nita, so exisiting user sanga sabai data pani xa and also, it can.. teivara ho 
    if (!isMatch) {
      return res.status(400).json({ message: "Invalid email or password" });
    }



    const token=jwt.sign({userId:User._id},"abrakadabra",{expiresIn:"1d"});
    // User ta hamro model wala vaihalyo, _id chai hamro mongodb le banako id
    // so we saying, for the id generated by mongodb, assign a token with the given secret key(abrakadabra)
      res.json({ message: "Login successful", token });
})

mongoose.connect("mongodb://localhost:27017/VIDEOS").then(()=>{
    console.log("connected fr");
    app.listen(3000,()=>{
        console.log("na lera mera aghi vedvav ka kura haru, baru sangai mili uthne khale kura garau")
    })
}).catch(()=>{
    console.log("write good code you donut");
    
})